name: Create Plugin Release

on:
  push:
    tags:
      - '*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get tag name and repository info
      id: info
      run: |
        echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
        
    - name: Create plugin directory
      run: |
        mkdir -p build
        mkdir -p build/${{ steps.info.outputs.repo_name }}
        
    - name: Copy plugin files
      run: |
        # Copy all files except those we want to exclude
        rsync -av --progress . build/${{ steps.info.outputs.repo_name }}/ \
          --exclude='.git*' \
          --exclude='node_modules' \
          --exclude='build' \
          --exclude='.github' \
          --exclude='*.md' \
          --exclude='composer.json' \
          --exclude='composer.lock' \
          --exclude='package.json' \
          --exclude='package-lock.json' \
          --exclude='yarn.lock' \
          --exclude='.DS_Store' \
          --exclude='Thumbs.db' \
          --exclude='.env*' \
          --exclude='*.log' \
          --exclude='tests' \
          --exclude='phpunit.xml*' \
          --exclude='.phpcs.xml*' \
          --exclude='webpack.config.js' \
          --exclude='gulpfile.js' \
          --exclude='src' \
          --exclude='assets/src' \
          --exclude='docker-compose.yml' \
          --exclude='Dockerfile' \
          --exclude='.vscode' \
          --exclude='.idea'
          
    - name: Create zip file
      run: |
        cd build
        zip -r "../${{ steps.info.outputs.repo_name }}.zip" ${{ steps.info.outputs.repo_name }}/
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag (or all commits if this is the first tag)
        PREVIOUS_TAG=$(git tag --sort=-version:refname | sed -n '2p')
        if [ -z "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s" --no-merges)
        else
          COMMITS=$(git log ${PREVIOUS_TAG}..${{ steps.info.outputs.tag_name }} --pretty=format:"- %s" --no-merges)
        fi
        
        # Save changelog to file
        echo "## Changes in ${{ steps.info.outputs.tag_name }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        if [ -z "$COMMITS" ]; then
          echo "- Initial release" >> CHANGELOG.md
        else
          echo "$COMMITS" >> CHANGELOG.md
        fi
        
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.info.outputs.tag_name }}
        release_name: ${{ steps.info.outputs.repo_name }} v${{ steps.info.outputs.tag_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.info.outputs.repo_name }}.zip
        asset_name: ${{ steps.info.outputs.repo_name }}.zip
        asset_content_type: application/zip